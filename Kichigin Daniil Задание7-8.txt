using System;
using System.Linq;
using System.Text.RegularExpressions;
namespace Lab5
{
    class Program
    {
        static void Main(string[] args)
        {
            string s = "127.0.0.1";
            if (s.IP()) Console.WriteLine("Является");
            else Console.WriteLine("Не является");

            s = "e02fd0e400fd090Aca300d00a0038ba0";
            if (s.GUID()) Console.WriteLine("Является");
            else Console.WriteLine("Не является");

            s = "http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument";
            if (s.URL()) Console.WriteLine("Является");
            else Console.WriteLine("Не является");

            s = "29/02/2000";
            if (s.DATA()) Console.WriteLine("Является");
            else Console.WriteLine("Не является");

            s = "23 руб 0.002 руб 22 р";
            s.RUB();

            s = "Cool_pass";
            if (s.PAS()) Console.WriteLine("Является");
            else Console.WriteLine("Не является");
        }
    }

    public static class StringExtension
    {
        public static bool IP(this string strText)
        {
            string pattern = @"25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][1-9]|[0-9](\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])){3}";
            Regex regex = new Regex(pattern);
            MatchCollection mathes = regex.Matches(strText);
            if(mathes.Count > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public static bool GUID(this string strText)
        {
            string pattern = @"[0-9a-fA-F]{8}[-]([0-9a-fA-F]{4}){3}[-][0-9a-fA-F]{12}";
            Regex regex = new Regex(pattern);
            MatchCollection mathes = regex.Matches(strText);
            if (mathes.Count > 0)
            {
                foreach (Match match in mathes)
                    Console.WriteLine(match.Value);
                return true;
            } 
            else
            {
                return false;
            }
        }

        public static bool URL(this string strText)
        {
            string pattern = @"(http(s?):[/]{2})?(www[.])?([a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9][.])([a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])(:\d+)?(/\w+(\.\w+)?)*((/)?\?\w+=\w+(?:&\w+=\w+)*)?/?(#\w+)?";
            Regex regex = new Regex(pattern);
            MatchCollection mathes = regex.Matches(strText);
            if (mathes.Count > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        public static bool DATA(this string strText)
        {
            string pattern = @"([012]\d|3[0-1])[/](01|03|05|07|08|10|12)[/]((1[6-9]|[2-9]\d)\d{2})|([0-2]\d|30)[/](04|06|09|11)[/]((1[6-9]|[2-9]\d)\d{2})|(29[/]02[/]((1[6-9]|[2-9]\d)(04|08|[13579][26]|[2468][480])|(16|[2468][048]|[3579][26])00)|(0\d|1\d|2[0-8])[/]02[/]((1[6-9]|[2-9]\d)\d{2}))";
            Regex regex = new Regex(pattern);
            MatchCollection mathes = regex.Matches(strText);
            if (mathes.Count > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        public static bool RUB(this string strText)
        {
            string pattern = @"\b(0|[1-9]\d*)(([.]\d\d?)]b)?\s(руб)";
            Regex regex = new Regex(pattern);
            MatchCollection mathes = regex.Matches(strText);
            if (mathes.Count > 0)
            {
                foreach (Match match in mathes)
                    Console.WriteLine(match.Value);
                return true;
            }
            else
            {
                return false;
            }
        }

        public static bool PAS(this string strText)
        {
            string pattern = @"((?=.*\d)(?=.*[A-Z])(?=.*[a-z])[\dA-Za-z_]{8,})";
            Regex regex = new Regex(pattern);
            MatchCollection mathes = regex.Matches(strText);
            if (mathes.Count > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

    }
}
Составить регулярное выражение, определяющее является ли заданная строка IP адресом, записанным в десятичном виде. 
– пример правильных выражений: 127.0.0.1, 255.255.255.0. 
– пример неправильных выражений: 1300.6.7.8, abc.def.gha.bcd.
Написать регулярное выражение, определяющее является ли данная строка GUID с или без скобок. Где GUID это строчка, состоящая из 8, 4, 4, 4, 12 шестнадцатеричных цифр разделенных тире. 
– пример правильных выражений: e02fd0e4-00fd-090A-ca30-0d00a0038ba0. 
– пример неправильных выражений: e02fd0e400fd090Aca300d00a0038ba0.
Написать регулярное выражение, определяющее является ли данная строчка валидным URL адресом. В данной задаче правильным URL считаются адреса http и https, явное указание протокола также может отсутствовать. Учитываются только адреса, состоящие из символов, т.е. IP адреса в качестве URL не присутствуют при проверке. Допускаются поддомены, указание порта доступа через двоеточие, GET запросы с передачей параметров, доступ к подпапкам на домене, допускается наличие якоря через решетку. Однобуквенные домены считаются запрещенными. Запрещены спецсимволы, например «–» в начале и конце имени домена. Запрещен символ «_» и пробел в имени домена. При составлении регулярного выражения ориентируйтесь на список правильных и неправильных выражений заданных ниже. 
– пример правильных выражений: http://www.example.com, http://example.com. 
– пример неправильных выражений: Just Text, http://a.com.
Написать регулярное выражение, определяющее является ли данная строчка датой в формате dd/mm/yyyy. Начиная с 1600 года до 9999 года. 
– пример правильных выражений: 29/02/2000, 30/04/2003, 01/01/2003. 
– пример неправильных выражений: 29/02/2001, 30-04-2003, 1/1/1899.
Есть текст с ценами в рублях. Извлечь из него цены. 
– пример правильных выражений: 78 руб. 
– пример неправильных выражений: 22 р., 0.002 руб.
Проверить, надежно ли составлен пароль. Пароль считается надежным, если он состоит из 8 или более символов. Где символом может быть английская буква, цифра и знак подчеркивания. Пароль должен содержать хотя бы одну заглавную букву, одну маленькую букву и одну цифру. 
– пример правильных выражений: C00l_Pass, SupperPas1. 
– пример неправильных выражений: Cool_pass, C00l.
